const middy = require('middy')
const {
  jsonBodyParser,
  validator,
  httpHeaderNormalizer,
  cors
} = require('middy/middlewares')
const {
  errorHandler,
  tokenValidator
} = require('./middleware')
const {
  getRides,
  getPreferences
} = require('./db')
const {
  getNextRidingDays
} = require('./lib')

async function getRidesHandler (event) {
  const {
    preferences,
    rider
  } = await getPreferences(event.user.email)

  const ridingDays = getNextRidingDays()
  const rides = {}

  for (let i = 0; i < ridingDays.length; i++) {
    const date = ridingDays[i]
    const generatedRides = await getRides(date)

    if (!generatedRides) {
      // rides have not been generated yet
      rides[date] = false
      continue
    }

    const ride = generatedRides
      .filter(ride => ride.riders.find(rider => rider.email === event.user.email))
      .map(ride => ({
        ...ride,
        riders: ride.riders
          .map(rider => ({
            name: rider.name,
            hasRoute: rider.hasRoute
          }))
      }))
      .pop()

    rides[date] = ride || {
      // rides have been generated by no ride has been assigned
      riding: false
    }
  }

  const output = {
    preferences,
    rides,
    rider
  }

  return {
    statusCode: 200,
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(output)
  }
}

const inputSchema = {
  type: 'object',
  properties: {}
}

module.exports = {
  handler: middy(getRidesHandler)
    .use(httpHeaderNormalizer())
    .use(tokenValidator())
    .use(jsonBodyParser())
    .use(validator({ inputSchema }))
    .use(errorHandler())
    .use(cors({
      origin: process.env.NODE_ENV !== 'development' ? 'https://peckham.cc' : '*'
    }))
}
